// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  emailVerified     DateTime?
  picture           String?
  phoneNumber       String?
  accounts          Account[]
  session           Session[]
  ownerOf           Organization[]
  role              Roles               @default(NEW_USER)
  stopCommunication Boolean             @default(false) // Add this line
  messageThread     MessageThread[]

  receivedMessages Message[] @relation("destinationUser")

  sentMessages Message[] @relation("senderUser")

  sentNotifications     Notification[] @relation("notificationSender")
  receivedNotifications Notification[] @relation("notificationUser")

  FormSubmission FormSubmission[]
 

  Organizer Organizer[]

  QueueJob QueueJob[]

  dataCollected Json?

  registeredEvents EventRegistration[] @relation("registrationUser")

  ticketsCheckedIn Ticket[] @relation("checkedInByUser")

  tickets Ticket[] @relation("ticketOwner")

  OrganizationContact OrganizationContact[]
}

enum Roles {
  USER
  ADMIN
  ANDINO_ADMIN
  NEW_USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String      @id @default(cuid())
  name        String
  colour      String?
  description String?
  logo        String?
  events      Event[]
  organizers  Organizer[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  queueJobs   QueueJob[]

  integration Integration[]

  MessageThread MessageThread[]

  Notification Notification[]

  Form   Form[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  OrganizationContact OrganizationContact[]
}

model OrganizationContact {
  id String @id @default(cuid())
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  user User @relation(fields: [userId], references: [id])
  userId String
}

model Organizer {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  role           OrganizerRole
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([userId, organizationId])
}

enum OrganizerRole {
  ADMIN
  VIEWER
}

model Event {
  id           String   @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  location     String?
  city         String?
  state        String?
  country      String?
  virtualLink  String?
  maxAttendees Int?
  organization     Organization        @relation(fields: [organizationId], references: [id])
  organizationId   String
  customFields     Json? // Added to store custom fields for the event
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  requiresApproval Boolean             @default(false)
  registrations    EventRegistration[]
  EventBot EventBot[]
  Notification Notification[]
  Form Form[]
  FormSubmission FormSubmission[]
  openGraphImage String?
  GeneratedMedia GeneratedMedia[]
  queueJobs QueueJob[]
  tickets TicketOfferings[]
}

enum TicketCategory {
  GENERAL
  VIP
  BACKSTAGE
}

model TicketOfferings {
  id String @id @default(cuid())
  name String
  category TicketCategory
  description String?
  price Decimal
  limit Int
  // some tickets are 2 for 1, some are 3 for 1, etc.
  ticketsPerPurchase Int @default(1)
  event Event @relation(fields: [eventId], references: [id])
  eventId String
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  PDF
  OTHER
}

model GeneratedMedia {
  id String @id @default(cuid())
  event Event? @relation(fields: [eventId], references: [id])
  eventId String?
  imageUrl String
  type MediaType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventRegistration {
  id           String         @id @default(cuid())
  user         User           @relation("registrationUser", fields: [userId], references: [id])
  userId       String
  event        Event          @relation(fields: [eventId], references: [id])
  eventId      String
  status       AttendeeStatus @default(PENDING)
  customFields Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paid      Boolean  @default(false)
  paymentId String?
  @@unique([eventId, userId]) // Add this line
  tickets Ticket[]
}

model Ticket {
  id String @id @default(cuid())
  description String?
  registration EventRegistration @relation(fields: [registrationId], references: [id])
  registrationId String
  user         User           @relation("ticketOwner", fields: [userId], references: [id])
  userId       String
  category TicketCategory
  checkedInDate DateTime?
  checkedInBy User? @relation("checkedInByUser", fields: [checkedInByUserId], references: [id])
  checkedInByUserId String?
}

enum AttendeeStatus {
  PENDING
  APPROVED
  REJECTED
}

model Integration {
  id                     String               @id @default(cuid())
  organization           Organization         @relation(fields: [organizationId], references: [id])
  organizationId         String
  whatsappIntegration    WhatsappIntegration?
  whatsappIntegrationId  String?
  defaultBotInstructions String
  defaultBotName         String

  @@unique([organizationId, whatsappIntegrationId])
}

enum EventBotType {
  openAI
}

model EventBot {
  id              String  @id @default(cuid())
  model           String
  externalId      String?
  botInstructions String
  botName         String
  event           Event   @relation(fields: [eventId], references: [id])
  eventId         String
}

enum MessageThreadType {
  whatsapp
  email
}

model MessageThread {
  id             String            @id @default(cuid())
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
  externalId     String?
  type           MessageThreadType
  contextUser    User              @relation(fields: [contextUserId], references: [id])
  contextUserId  String
  messages       Message[]
  createdAt         DateTime       @default(now())
  updatedAt      DateTime         @default(now())
}

model Message {
  id                String         @id @default(cuid())
  messageThread     MessageThread? @relation(fields: [messageThreadId], references: [id])
  messageThreadId   String?
  senderUser        User?          @relation("senderUser", fields: [senderUserId], references: [id])
  senderUserId      String?
  destinationUser   User?          @relation("destinationUser", fields: [destinationUserId], references: [id])
  destinationUserId String?
  content           String
  attachement       String?
  externalId        String?
  createdAt         DateTime       @default(now())
}

model WhatsappIntegration {
  id                String      @id @default(cuid())
  integrationId     String      @unique
  integration       Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  verifyToken       String      @unique
  phoneNumber       String
  phoneNumberId     String
  businessAccountId String
  accessToken       String
}

model Notification {
  id             String       @id @default(cuid())
  userId         String?
  user           User?         @relation("notificationUser", fields: [userId], references: [id])
  eventId        String?
  event          Event?       @relation(fields: [eventId], references: [id])
  senderUser     User?        @relation("notificationSender", fields: [senderUserId], references: [id])
  senderUserId   String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  type           NotificationType
  sentAt         DateTime?
  scheduledFor   DateTime // When the reminder should be sent
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  formId         String? // Add this line
  form           Form?        @relation(fields: [formId], references: [id]) // Add this line
  extraData      Json?
  tries          Int          @default(0)
}

enum NotificationType {
  ORG_INVITE
  RESERVATION_PAYMENT_REMINDER
  RESERVATION_CONFIRMED
  RESERVATION_REJECTED
  RESERVATION_REMINDER
  BASE_NOTIFICATION
}

model Form {
  id             String           @id @default(cuid())
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  event          Event?           @relation(fields: [eventId], references: [id])
  eventId        String?
  name           String
  description    String?
  fields         Json
  submissions    FormSubmission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  Notification Notification[]
}

model FormSubmission {
  id        String   @id @default(cuid())
  form      Form     @relation(fields: [formId], references: [id])
  formId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id])
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// enum SchedulingType {
//   ROUND_ROBIN @map("roundRobin")
//   COLLECTIVE  @map("collective")
//   MANAGED     @map("managed")
// }

// enum PeriodType {
//   UNLIMITED      @map("unlimited")
//   ROLLING        @map("rolling")
//   RANGE          @map("range")
// }

// model EventType {
//   id          Int      @id @default(autoincrement())
//   title       String
//   slug        String   @unique
//   description String?
//   length      Int
//   hidden      Boolean  @default(false)
//   userId      String
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   periodType  PeriodType  @default(UNLIMITED)
//   periodStartDate DateTime?
//   periodEndDate   DateTime?
//   bookings     Booking[]
// }

// model Booking {
//   id            Int       @id @default(autoincrement())
//   userId        String?
//   user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   eventTypeId   Int
//   eventType     EventType  @relation(fields: [eventTypeId], references: [id])
//   startTime     DateTime
//   endTime       DateTime
//   status        BookingStatus @default(ACCEPTED)
// }

// model Availability {
//   id          Int       @id @default(autoincrement())
//   userId      String
//   user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   startTime   DateTime   @db.Time
//   endTime     DateTime   @db.Time
// }

// enum BookingStatus {
//   CANCELLED     @map("cancelled")
//   ACCEPTED      @map("accepted")
//   PENDING       @map("pending")
// }

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum JobType {
  GENERATE_EVENT_OPEN_GRAPH
  COLLECT_USER_DATA
  // Add more job types as needed
}

model QueueJob {
  id          String    @id @default(cuid())
  type        JobType
  status      JobStatus @default(PENDING)
  data        Json
  priority    Int       @default(0)
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startedAt   DateTime?
  completedAt DateTime?
  failedAt    DateTime?
  error       String?

  // Optional: Add relations if jobs are associated with specific entities
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@index([status, type, priority])
  @@index([createdAt])
}

// Add this model to your existing schema
model CronLock {
  id        String   @id @default(cuid())
  jobName   String   @unique
  lockedAt  DateTime
  expiresAt DateTime
}
